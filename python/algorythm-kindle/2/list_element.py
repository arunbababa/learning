# 大前提pythonの変数はオブジェクトと結びついた名前に過ぎない
# ゆえにリストやタプルの要素の型は同じである必要はない

# リストの要素の型がそろっている必要がないことを確認する
# x = [1, 2.0, '3', True]

# for i in range(len(x)):
#     print(f'x[{i}] = {x[i]}')
    
# シャローコピーとディープコピーの違いを確認する
x = [[1, 2], [3, 4]]
y = x.copy()  # シャローコピー
x[0][0] = 100  # xの要素を変更
print(y)  # yの要素も変更されている

# ディープコピー
import copy
z = [[1, 2], [3, 4]]
h = copy.deepcopy(z)  # ディープコピー
z[0][0] = 100  # zの要素を変更
print(h)  # hの要素は変更されていない

# 参照先の値一つ一つまでコピーするのがディープコピー
# 参照先のオブジェクトはコピーしないのがシャローコピーというかまぁ塊をコピーするイメージなので、塊が変更されたら当然連なっているものも変更されるんで値は変更不可で別のオブジェクトが作られるからディープコピーで対応できる、もし配列をコピーで渡してしまうとそれはイテラブルで同じオブジェクト内で更新できるから当然yも変更されてしまう